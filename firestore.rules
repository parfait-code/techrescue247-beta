rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Fonction pour vérifier si l'utilisateur est authentifié
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Fonction pour vérifier si l'utilisateur est admin
    function isAdmin() {
      return isAuthenticated() && 
        request.auth.token.role == 'admin';
    }
    
    // Fonction pour vérifier si c'est le propriétaire
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Fonction pour obtenir les données utilisateur
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }
    
    // ========== RÈGLES POUR LA COLLECTION USERS ==========
    match /users/{userId} {
      // Lecture : admin ou propriétaire
      allow read: if isAdmin() || isOwner(userId);
      
      // Création : seulement lors de l'inscription (par le système)
      allow create: if isAuthenticated() && request.auth.uid == userId &&
        request.resource.data.role == 'user'; // Empêcher la création d'admin via l'interface
      
      // Mise à jour : admin ou propriétaire (mais pas le rôle pour les non-admins)
      allow update: if (isAdmin() || isOwner(userId)) && 
        (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['role']) || isAdmin());
      
      // Suppression : seulement admin
      allow delete: if isAdmin();
    }
    
    // ========== RÈGLES POUR LA COLLECTION TICKETS ==========
    match /tickets/{ticketId} {
      // Lecture : admin ou propriétaire du ticket
      allow read: if isAdmin() || 
        (isAuthenticated() && resource.data.userId == request.auth.uid);
      
      // Création : utilisateurs authentifiés (doivent être propriétaires)
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.status == 'open' &&
        request.resource.data.keys().hasAll(['userId', 'title', 'description', 'phone', 'priority']);
      
      // Mise à jour : admin uniquement
      allow update: if isAdmin();
      
      // Suppression : admin uniquement
      allow delete: if isAdmin();
    }
    
    // ========== RÈGLES POUR LA COLLECTION MESSAGES ==========
    match /messages/{messageId} {
      // Lecture : admin uniquement
      allow read: if isAdmin();
      
      // Création : publique (pour le formulaire de contact)
      // Mais avec validation des champs requis
      allow create: if 
        request.resource.data.keys().hasAll(['name', 'email', 'phone', 'subject', 'message']) &&
        request.resource.data.status == 'new' &&
        request.resource.data.name is string &&
        request.resource.data.email is string &&
        request.resource.data.phone is string &&
        request.resource.data.subject is string &&
        request.resource.data.message is string &&
        request.resource.data.name.size() > 0 &&
        request.resource.data.email.size() > 0 &&
        request.resource.data.phone.size() > 0 &&
        request.resource.data.subject.size() > 0 &&
        request.resource.data.message.size() > 0;
      
      // Mise à jour : admin uniquement
      allow update: if isAdmin();
      
      // Suppression : admin uniquement
      allow delete: if isAdmin();
    }
    
    // ========== RÈGLES POUR LES SOUS-COLLECTIONS (si nécessaire) ==========
    // Par exemple, pour les pièces jointes des tickets
    match /tickets/{ticketId}/attachments/{attachmentId} {
      allow read: if isAdmin() || 
        (isAuthenticated() && 
         get(/databases/$(database)/documents/tickets/$(ticketId)).data.userId == request.auth.uid);
      
      allow create: if isAuthenticated() && 
        get(/databases/$(database)/documents/tickets/$(ticketId)).data.userId == request.auth.uid;
      
      allow update: if false; // Les pièces jointes ne peuvent pas être modifiées
      
      allow delete: if isAdmin();
    }
  }
}